{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadwaqaskhan/Desktop/react/projects/CovidTrackerRev1/src/components/LineGraph/LineGraph.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./linegraph.css\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        // Include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildDeathRate = data => {\n  let chartData = [];\n\n  for (let date in data.cases) {\n    let newDataPoint = {\n      x: date,\n      y: data[\"deaths\"][date] / data[\"recovered\"][date] * 100\n    };\n    chartData.push(newDataPoint);\n  }\n\n  return chartData;\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph({\n  casesType,\n  ...props\n}) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=60\").then(response => {\n        return response.json();\n      }).then(data => {\n        console.log(props);\n\n        if (props.deathRate) {\n          let chartData = buildDeathRate(data);\n        } else {\n          let chartData = buildChartData(data, casesType);\n        }\n\n        let chartData = buildChartData(data, casesType);\n        setData(chartData);\n        console.log(chartData); // buildChart(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/React.createElement(Line, {\n    data: {\n      datasets: [{\n        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n        borderColor: \"#CC1034\",\n        data: data\n      }]\n    },\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["/Users/muhammadwaqaskhan/Desktop/react/projects/CovidTrackerRev1/src/components/LineGraph/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildDeathRate","chartData","date","cases","newDataPoint","x","y","push","buildChartData","casesType","lastDataPoint","LineGraph","props","setData","fetchData","fetch","then","response","json","console","log","deathRate","className","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./linegraph.css\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildDeathRate = (data) => {\n  let chartData = [];\n  for (let date in data.cases) {\n    let newDataPoint = {\n      x: date,\n      y: (data[\"deaths\"][date] / data[\"recovered\"][date]) * 100,\n    };\n    chartData.push(newDataPoint);\n  }\n  return chartData;\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=60\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          console.log(props);\n          if (props.deathRate) {\n            let chartData = buildDeathRate(data);\n          } else {\n            let chartData = buildChartData(data, casesType);\n          }\n\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}